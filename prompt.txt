

Step 4. Build projects list with pagination and tag filters (HTMX partial update), search by title/tech. Project detail page with markdown rendering, hero image, meta/OG tags, prev/next. Include unit tests for views and tag filtering.

Acceptance criteria: filters work without JS; HTMX enhances UX; tests green.

⸻

Step 5 — Blog/Notes (optional)

Message to send:

Step 5. Blog list + detail, markdown render with code highlighting, drafts vs published, RSS feed, canonical URLs. Include tests. Keep it optional behind a feature flag.

Acceptance criteria: RSS validates; draft posts hidden from anon users.

⸻

Step 6 — Contact form

Message to send:

Step 6. Server‑validated contact form (CSRF, honeypot, consent checkbox). On success, save ContactMessage and show a thank‑you state (with HTMX). Email backend: console in dev. Add basic rate‑limit (per IP) middleware.

Acceptance criteria: form POST works; dev emails print to console; rate‑limit tested.

⸻

Step 7 — Styling & Components

Message to send:

Step 7. Polish UI with Tailwind components (responsive navbar, cards, buttons, badges), typography plugin, dark mode toggle (prefers‑color‑scheme + localStorage). Extract partials for header/footer/card/project item. Ensure WCAG AA contrast.

Acceptance criteria: lighthouse a11y ≥ 95; responsive on mobile/desktop.

⸻

Step 8 — SEO & Performance

Message to send:

Step 8. Add OpenGraph/Twitter meta helpers, per‑page titles/descriptions, JSON‑LD for projects/blog. Generate sitemap.xml, robots.txt. Configure caching headers and Django template fragment caching for project grids. Add image srcset/sizes.

Acceptance criteria: pages have correct meta; PageSpeed good; cache verified.

⸻

Step 9 — Tests, CI, and QA

Message to send:

Step 9. Expand pytest suite (models, views, forms). Add GitHub Actions workflow for lint + tests on pushes/PRs. Include coverage report and a badge (optional). Provide commands and sample failing test to verify CI.

Acceptance criteria: CI green on GitHub; coverage threshold enforced.

⸻

Step 10 — Deployment

Message to send:

Step 10. Production settings, static/media handling (Whitenoise), security headers, allowed hosts, Postgres config, and Render deployment (Procfile, services). Provide environment variables list and smoke test checklist. Add backup/restore instructions for DB.

Acceptance criteria: site live on Render with HTTPS; admin secured.

⸻

3) “Content Fill” Prompt (use when ready to add real content)

Prompt:

Generate 6 strong portfolio projects for my background (physics → data science/dev), each with: title, one‑line value prop, detailed case study (problem → approach → tools → results with metrics), tech stack tags, links (repo/live), dates, images to source later. Also generate a concise About blurb and a skill matrix grouped by Data, Backend, Frontend, DevOps.

⸻

4) Nice‑to‑Haves (send as separate follow‑ups anytime)
	•	Analytics (Plausible/GA4) with cookie‑less mode
	•	Internationalization (i18n) for EN and your native language
	•	Bookmarkable filtered project views (query params)
	•	Sitemap per section (projects/blog)
	•	OpenAPI endpoint for projects list (read‑only)
	•	Dockerfile + docker‑compose for local dev
	•	Image optimization pipeline (thumbs, WebP) via sorl‑thumbnail or easy‑thumbnails

⸻

5) Housekeeping
	•	Commit convention: Conventional Commits (feat:, fix:, chore:, test:, docs:)
	•	Branching: trunk‑based (main) + short‑lived feature branches
	•	Issues/Tasks: create a lightweight TODO in README with checkboxes

⸻

6) What to do right now
	1.	Copy the Master Kickoff Prompt into the chat.
	2.	Then paste Step 1. Run what it gives you. If something breaks, paste errors back.
	3.	Continue with NEXT between steps, or paste a specific step when you want to reorder.

Happy building! 🚀