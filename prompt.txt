Django Portfolio Project ‚Äî Stepwise Conversation Prompt

Use this as a copy‚Äëpaste starter and stepwise follow‚Äëups to build your portfolio in Django.

‚∏ª

0) Personalization (edit these once)
	‚Ä¢	Your Name: Prakash Saud
	‚Ä¢	Tagline: Physicist ‚Ä¢ Data Scientist ‚Ä¢ Developer
	‚Ä¢	Short Bio (1‚Äì2 lines): I apply physics‚Äëtrained analytical thinking to build data‚Äëdriven software‚ÄîML, analytics, and pragmatic web apps in Django.
	‚Ä¢	Location (optional):
	‚Ä¢	Email: your@email.com
	‚Ä¢	Socials: GitHub, LinkedIn, Kaggle, X, Google Scholar (as applicable)
	‚Ä¢	Branding: light/dark mode, Tailwind typography, clean minimal aesthetic

‚∏ª

1) Master Kickoff Prompt (paste this to start a new chat if needed)

Prompt:

You are my Django Portfolio Coach. Guide me through building a production‚Äëready portfolio site in Django 5.x with TailwindCSS and HTMX (progressive enhancement). The goal: a fast, accessible site showcasing my projects, blog/notes, resume, and contact form.

Scope
	‚Ä¢	Pages: Home, Projects (grid + filters), Project detail (case study), About/Resume (PDF download), Blog/Notes (optional), Contact (form with server validation + success state), Search, 404/500.
	‚Ä¢	Quality: A11y, SEO (meta, OpenGraph/Twitter cards, sitemap.xml, robots.txt), canonical URLs, structured data for projects/blog, favicons.
	‚Ä¢	DX: pre-commit (black, isort, flake8), pytest (+ coverage), .editorconfig, .env handling, settings split (dev/prod), logging.
	‚Ä¢	Data: SQLite in dev; PostgreSQL in prod. Admin curated content. Media for project images.
	‚Ä¢	Styling: Tailwind (via CDN in dev, build pipeline optional). Typography plugin.
	‚Ä¢	Interactivity: HTMX for project filter/search, contact form submission feedback.
	‚Ä¢	Deploy: Render (or Fly.io) with Gunicorn + Whitenoise, managed Postgres. CI via GitHub Actions (tests + lint on push).

Working Agreement

For each step, provide:
	1.	a brief goal, 2) exact shell commands, 3) file diffs (unified patch format) or full file contents only when needed, 4) minimal why, 5) run/verify checklist, and 6) a concise commit message. Stop after each step and wait for me to say NEXT (or ask for changes). If something fails, help me debug, then continue.

Initial Preferences
	‚Ä¢	Project name: portfolio
	‚Ä¢	Apps: core (settings/base), pages, projects, blog, contact
	‚Ä¢	Python 3.11+
	‚Ä¢	Package manager: pip + venv
	‚Ä¢	Templates: Jinja‚Äëlike Django templates with base layout, components (partials)
	‚Ä¢	Content fields for projects: title, slug, summary, long_content (markdown), tech_stack (tags), repo_url, live_url, start/end_date, hero_image, thumbnail, featured:boolean, order:int
	‚Ä¢	Blog (optional): title, slug, excerpt, body (markdown), published_at, tags, cover_image, is_published
	‚Ä¢	Contact: name, email, message, consent:boolean, created_at
	‚Ä¢	About: resume PDF link + autogenerated ‚ÄúSkills‚Äù section from tags used in projects/blog

Start at Step 1 below.

‚∏ª

2) Stepwise Follow‚ÄëUps (paste these one by one)

Step 1 ‚Äî Plan & Scaffold

Message to send:

Step 1. Plan and project scaffold. Create virtual env, django-admin startproject portfolio, add apps pages, projects, blog, contact. Add settings split (dev/prod), .env, Tailwind via CDN for now, base template with nav/footer, and root URL routes. Include pre-commit, black, isort, flake8, pytest. Provide commands, diffs, and a verification checklist.

Acceptance criteria: project runs at http://127.0.0.1:8000/, base layout renders, lint/test commands exist.

‚∏ª

Step 2 ‚Äî Models & Admin

Message to send:

Step 2. Implement models for Project, BlogPost, ContactMessage with fields from the Kickoff Prompt. Add slugs, get_absolute_url, and sensible __str__. Register/curate in Django Admin with list filters/search, and thumbnail preview. Migrations + sample fixture data. Commands, diffs, and verification, please.

Acceptance criteria: migrations apply; admin lists work; sample items visible.

‚∏ª

Step 3 ‚Äî Home & Pages app

Message to send:

Step 3. Create pages views/templates: Home (hero with my name + tagline, featured projects grid, latest posts), About (bio + skills, resume download), 404/500 pages. Add sitemap and robots.txt. Provide diffs and checks.

Acceptance criteria: Home shows featured projects and latest posts via ORM queries.

‚∏ª

Step 4 ‚Äî Projects: list, filters, detail

Message to send:

Step 4. Build projects list with pagination and tag filters (HTMX partial update), search by title/tech. Project detail page with markdown rendering, hero image, meta/OG tags, prev/next. Include unit tests for views and tag filtering.

Acceptance criteria: filters work without JS; HTMX enhances UX; tests green.

‚∏ª

Step 5 ‚Äî Blog/Notes (optional)

Message to send:

Step 5. Blog list + detail, markdown render with code highlighting, drafts vs published, RSS feed, canonical URLs. Include tests. Keep it optional behind a feature flag.

Acceptance criteria: RSS validates; draft posts hidden from anon users.

‚∏ª

Step 6 ‚Äî Contact form

Message to send:

Step 6. Server‚Äëvalidated contact form (CSRF, honeypot, consent checkbox). On success, save ContactMessage and show a thank‚Äëyou state (with HTMX). Email backend: console in dev. Add basic rate‚Äëlimit (per IP) middleware.

Acceptance criteria: form POST works; dev emails print to console; rate‚Äëlimit tested.

‚∏ª

Step 7 ‚Äî Styling & Components

Message to send:

Step 7. Polish UI with Tailwind components (responsive navbar, cards, buttons, badges), typography plugin, dark mode toggle (prefers‚Äëcolor‚Äëscheme + localStorage). Extract partials for header/footer/card/project item. Ensure WCAG AA contrast.

Acceptance criteria: lighthouse a11y ‚â• 95; responsive on mobile/desktop.

‚∏ª

Step 8 ‚Äî SEO & Performance

Message to send:

Step 8. Add OpenGraph/Twitter meta helpers, per‚Äëpage titles/descriptions, JSON‚ÄëLD for projects/blog. Generate sitemap.xml, robots.txt. Configure caching headers and Django template fragment caching for project grids. Add image srcset/sizes.

Acceptance criteria: pages have correct meta; PageSpeed good; cache verified.

‚∏ª

Step 9 ‚Äî Tests, CI, and QA

Message to send:

Step 9. Expand pytest suite (models, views, forms). Add GitHub Actions workflow for lint + tests on pushes/PRs. Include coverage report and a badge (optional). Provide commands and sample failing test to verify CI.

Acceptance criteria: CI green on GitHub; coverage threshold enforced.

‚∏ª

Step 10 ‚Äî Deployment

Message to send:

Step 10. Production settings, static/media handling (Whitenoise), security headers, allowed hosts, Postgres config, and Render deployment (Procfile, services). Provide environment variables list and smoke test checklist. Add backup/restore instructions for DB.

Acceptance criteria: site live on Render with HTTPS; admin secured.

‚∏ª

3) ‚ÄúContent Fill‚Äù Prompt (use when ready to add real content)

Prompt:

Generate 6 strong portfolio projects for my background (physics ‚Üí data science/dev), each with: title, one‚Äëline value prop, detailed case study (problem ‚Üí approach ‚Üí tools ‚Üí results with metrics), tech stack tags, links (repo/live), dates, images to source later. Also generate a concise About blurb and a skill matrix grouped by Data, Backend, Frontend, DevOps.

‚∏ª

4) Nice‚Äëto‚ÄëHaves (send as separate follow‚Äëups anytime)
	‚Ä¢	Analytics (Plausible/GA4) with cookie‚Äëless mode
	‚Ä¢	Internationalization (i18n) for EN and your native language
	‚Ä¢	Bookmarkable filtered project views (query params)
	‚Ä¢	Sitemap per section (projects/blog)
	‚Ä¢	OpenAPI endpoint for projects list (read‚Äëonly)
	‚Ä¢	Dockerfile + docker‚Äëcompose for local dev
	‚Ä¢	Image optimization pipeline (thumbs, WebP) via sorl‚Äëthumbnail or easy‚Äëthumbnails

‚∏ª

5) Housekeeping
	‚Ä¢	Commit convention: Conventional Commits (feat:, fix:, chore:, test:, docs:)
	‚Ä¢	Branching: trunk‚Äëbased (main) + short‚Äëlived feature branches
	‚Ä¢	Issues/Tasks: create a lightweight TODO in README with checkboxes

‚∏ª

6) What to do right now
	1.	Copy the Master Kickoff Prompt into the chat.
	2.	Then paste Step 1. Run what it gives you. If something breaks, paste errors back.
	3.	Continue with NEXT between steps, or paste a specific step when you want to reorder.

Happy building! üöÄ