# Generated by Django 5.2.6 on 2025-10-05 03:49

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_deleted", models.BooleanField(db_index=True, default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("display_name", models.CharField(blank=True, max_length=190)),
                ("avatar_url", models.URLField(blank=True)),
                ("notes", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="Conversation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_deleted", models.BooleanField(db_index=True, default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("remote_thread_id", models.CharField(max_length=190)),
                ("subject", models.CharField(blank=True, max_length=300)),
                (
                    "last_message_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("unread_count", models.PositiveIntegerField(default=0)),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("urgent", "Urgent"),
                            ("action", "Action"),
                            ("fyi", "FYI"),
                            ("spam", "Spam"),
                        ],
                        default="fyi",
                        max_length=12,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("snoozed", "Snoozed"),
                            ("archived", "Archived"),
                        ],
                        default="open",
                        max_length=12,
                    ),
                ),
                (
                    "importance_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("is_starred", models.BooleanField(default=False)),
                ("hash_key", models.CharField(blank=True, max_length=64)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "ordering": ["-last_message_at", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Integration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("gmail", "Gmail"),
                            ("slack", "Slack"),
                            ("teams", "Microsoft Teams"),
                            ("whatsapp", "WhatsApp"),
                            ("other", "Other"),
                        ],
                        max_length=24,
                    ),
                ),
                (
                    "account_label",
                    models.CharField(
                        help_text="Display label (e.g., email address or workspace name)",
                        max_length=190,
                    ),
                ),
                ("scopes_json", models.JSONField(blank=True, default=list)),
                (
                    "secrets_ref",
                    models.CharField(
                        blank=True,
                        help_text="Reference to encrypted credential store",
                        max_length=190,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("error", "Error"),
                            ("disconnected", "Disconnected"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("sync_status", models.CharField(default="idle", max_length=20)),
                ("last_error", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=60)),
                ("slug", models.SlugField(max_length=80)),
                ("color", models.CharField(blank=True, max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name="AIAnnotation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("target_object_id", models.PositiveBigIntegerField()),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("summary", "Summary"),
                            ("priority", "Priority"),
                            ("sentiment", "Sentiment"),
                            ("entities", "Entities"),
                            ("action_items", "Action Items"),
                            ("other", "Other"),
                        ],
                        default="summary",
                        max_length=24,
                    ),
                ),
                ("content_text", models.TextField(blank=True)),
                ("content_json", models.JSONField(blank=True, default=dict)),
                ("score", models.FloatField(blank=True, null=True)),
                ("model_name", models.CharField(blank=True, max_length=120)),
                (
                    "target_content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Stream",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("chat", "Chat"),
                            ("sms", "SMS"),
                            ("other", "Other"),
                        ],
                        default="email",
                        max_length=16,
                    ),
                ),
                (
                    "kind",
                    models.CharField(help_text="Label/Channel/DM, etc.", max_length=48),
                ),
                (
                    "remote_id",
                    models.CharField(help_text="Provider-side id", max_length=190),
                ),
                ("name", models.CharField(blank=True, max_length=190)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "integration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="streams",
                        to="focusflow.integration",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_deleted", models.BooleanField(db_index=True, default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("remote_message_id", models.CharField(max_length=190)),
                ("sent_at", models.DateTimeField(db_index=True)),
                ("text", models.TextField(blank=True)),
                ("html", models.TextField(blank=True)),
                ("is_from_me", models.BooleanField(default=False)),
                ("is_read", models.BooleanField(default=False)),
                ("external_url", models.URLField(blank=True)),
                ("ingested_at", models.DateTimeField(auto_now_add=True)),
                (
                    "thread_index",
                    models.IntegerField(
                        blank=True,
                        help_text="Order inside thread if provider supplies one",
                        null=True,
                    ),
                ),
                (
                    "vector_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to embeddings/vector store",
                        max_length=64,
                    ),
                ),
                ("reactions_json", models.JSONField(blank=True, default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "conversation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="focusflow.conversation",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sent_messages",
                        to="focusflow.contact",
                    ),
                ),
                (
                    "stream",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="focusflow.stream",
                    ),
                ),
            ],
            options={
                "ordering": ["-sent_at", "-created_at"],
            },
        ),
        migrations.AddField(
            model_name="conversation",
            name="stream",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="conversations",
                to="focusflow.stream",
            ),
        ),
        migrations.CreateModel(
            name="SyncCursor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("cursor", models.TextField(blank=True)),
                ("last_synced_at", models.DateTimeField(blank=True, null=True)),
                ("status", models.CharField(default="idle", max_length=20)),
                ("last_error_message", models.TextField(blank=True)),
                ("last_duration_ms", models.PositiveIntegerField(default=0)),
                ("stats_json", models.JSONField(blank=True, default=dict)),
                (
                    "stream",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cursor",
                        to="focusflow.stream",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MessageTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="message_tags",
                        to="focusflow.message",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="message_tags",
                        to="focusflow.tag",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ConversationTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "conversation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conversation_tags",
                        to="focusflow.conversation",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conversation_tags",
                        to="focusflow.tag",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Workspace",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_deleted", models.BooleanField(db_index=True, default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=120)),
                ("slug", models.SlugField(max_length=140, unique=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="owned_workspaces",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_deleted", models.BooleanField(db_index=True, default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("source_object_id", models.PositiveBigIntegerField()),
                ("title", models.CharField(max_length=240)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("todo", "To Do"),
                            ("doing", "Doing"),
                            ("done", "Done"),
                            ("dismissed", "Dismissed"),
                        ],
                        default="todo",
                        max_length=16,
                    ),
                ),
                ("due_at", models.DateTimeField(blank=True, null=True)),
                (
                    "confidence",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="focusflow_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "origin_annotation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tasks",
                        to="focusflow.aiannotation",
                    ),
                ),
                (
                    "source_content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="focusflow.workspace",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="tag",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tags",
                to="focusflow.workspace",
            ),
        ),
        migrations.AddField(
            model_name="integration",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="integrations",
                to="focusflow.workspace",
            ),
        ),
        migrations.AddField(
            model_name="conversation",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="conversations",
                to="focusflow.workspace",
            ),
        ),
        migrations.AddField(
            model_name="contact",
            name="workspace",
            field=models.ForeignKey(
                blank=True,
                help_text="Null = global contact",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="contacts",
                to="focusflow.workspace",
            ),
        ),
        migrations.AddField(
            model_name="aiannotation",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ai_annotations",
                to="focusflow.workspace",
            ),
        ),
        migrations.CreateModel(
            name="WorkspaceMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("owner", "Owner"),
                            ("admin", "Admin"),
                            ("member", "Member"),
                        ],
                        default="member",
                        max_length=12,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workspace_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="focusflow.workspace",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ConversationParticipant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("originator", "Originator"),
                            ("member", "Member"),
                            ("external", "External"),
                        ],
                        default="member",
                        max_length=16,
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conversation_participations",
                        to="focusflow.contact",
                    ),
                ),
                (
                    "conversation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="focusflow.conversation",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["conversation"], name="focusflow_c_convers_bc479f_idx"
                    ),
                    models.Index(
                        fields=["contact", "role"],
                        name="focusflow_c_contact_7cdf87_idx",
                    ),
                ],
                "unique_together": {("conversation", "contact")},
            },
        ),
        migrations.CreateModel(
            name="Identity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone"),
                            ("slack", "Slack"),
                            ("teams", "Teams"),
                            ("whatsapp", "WhatsApp"),
                            ("other", "Other"),
                        ],
                        max_length=24,
                    ),
                ),
                ("value", models.CharField(max_length=190)),
                ("normalized_value", models.CharField(max_length=190)),
                (
                    "contact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="identities",
                        to="focusflow.contact",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["contact", "kind"],
                        name="focusflow_i_contact_cbbf3e_idx",
                    )
                ],
                "unique_together": {("kind", "normalized_value")},
            },
        ),
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("file", models.FileField(upload_to="focusflow/attachments/%Y/%m/")),
                ("filename", models.CharField(max_length=255)),
                ("mime_type", models.CharField(blank=True, max_length=120)),
                ("size", models.PositiveIntegerField(default=0)),
                ("sha256", models.CharField(blank=True, max_length=64)),
                (
                    "message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="focusflow.message",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["message"], name="focusflow_a_message_afc24e_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MessageRecipient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rtype",
                    models.CharField(
                        choices=[
                            ("to", "To"),
                            ("cc", "Cc"),
                            ("bcc", "Bcc"),
                            ("channel", "Channel"),
                        ],
                        default="to",
                        max_length=12,
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_messages",
                        to="focusflow.contact",
                    ),
                ),
                (
                    "message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recipients",
                        to="focusflow.message",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["message"], name="focusflow_m_message_23efa6_idx"
                    ),
                    models.Index(
                        fields=["contact", "rtype"],
                        name="focusflow_m_contact_51b702_idx",
                    ),
                ],
                "unique_together": {("message", "contact", "rtype")},
            },
        ),
        migrations.AddIndex(
            model_name="stream",
            index=models.Index(
                fields=["integration", "category"],
                name="focusflow_s_integra_2e21a0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stream",
            index=models.Index(
                fields=["is_active"], name="focusflow_s_is_acti_ed1dbb_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="stream",
            unique_together={("integration", "remote_id")},
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["conversation", "-sent_at"],
                name="focusflow_m_convers_0a1f04_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["stream", "-sent_at"], name="focusflow_m_stream__8842ab_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["sender", "sent_at"], name="focusflow_m_sender__1ff439_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="message",
            unique_together={("stream", "remote_message_id")},
        ),
        migrations.AddIndex(
            model_name="messagetag",
            index=models.Index(fields=["tag"], name="focusflow_m_tag_id_d979ad_idx"),
        ),
        migrations.AddIndex(
            model_name="messagetag",
            index=models.Index(
                fields=["message"], name="focusflow_m_message_6e2187_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="messagetag",
            unique_together={("message", "tag")},
        ),
        migrations.AddIndex(
            model_name="conversationtag",
            index=models.Index(fields=["tag"], name="focusflow_c_tag_id_8ae7a9_idx"),
        ),
        migrations.AddIndex(
            model_name="conversationtag",
            index=models.Index(
                fields=["conversation"], name="focusflow_c_convers_cd4413_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="conversationtag",
            unique_together={("conversation", "tag")},
        ),
        migrations.AddIndex(
            model_name="workspace",
            index=models.Index(fields=["slug"], name="focusflow_w_slug_a4641c_idx"),
        ),
        migrations.AddIndex(
            model_name="workspace",
            index=models.Index(
                fields=["owner", "created_at"], name="focusflow_w_owner_i_ae10c4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["workspace", "status"], name="focusflow_t_workspa_6d014c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(fields=["due_at"], name="focusflow_t_due_at_a5f90c_idx"),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["assignee"], name="focusflow_t_assigne_11fa21_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tag",
            index=models.Index(
                fields=["workspace", "name"], name="focusflow_t_workspa_d05bec_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tag",
            unique_together={("workspace", "slug")},
        ),
        migrations.AddIndex(
            model_name="integration",
            index=models.Index(
                fields=["workspace", "provider"], name="focusflow_i_workspa_736673_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="integration",
            index=models.Index(fields=["status"], name="focusflow_i_status_2bdca3_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="integration",
            unique_together={("workspace", "provider", "account_label")},
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["workspace", "state"], name="focusflow_c_workspa_689b1e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["stream", "-last_message_at"],
                name="focusflow_c_stream__f38dcc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["priority"], name="focusflow_c_priorit_cb05df_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["is_starred"], name="focusflow_c_is_star_60fc0b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="conversation",
            unique_together={("stream", "remote_thread_id")},
        ),
        migrations.AddIndex(
            model_name="contact",
            index=models.Index(
                fields=["workspace", "display_name"],
                name="focusflow_c_workspa_927361_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="contact",
            index=models.Index(
                fields=["created_at"], name="focusflow_c_created_a5fc5b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aiannotation",
            index=models.Index(
                fields=["workspace", "created_at"],
                name="focusflow_a_workspa_4c3507_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aiannotation",
            index=models.Index(
                fields=["target_content_type", "target_object_id"],
                name="focusflow_a_target__3999f3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aiannotation",
            index=models.Index(fields=["kind"], name="focusflow_a_kind_285fa3_idx"),
        ),
        migrations.AddIndex(
            model_name="workspacemember",
            index=models.Index(
                fields=["workspace", "role"], name="focusflow_w_workspa_542933_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="workspacemember",
            index=models.Index(
                fields=["user", "is_active"], name="focusflow_w_user_id_44c733_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="workspacemember",
            unique_together={("workspace", "user")},
        ),
    ]
